{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sushmitha-Katti/ERA/blob/main/Session_15_Speeding_up_Transformers/archives/colate_fn\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pytorch-lightning"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VXohtS_qPwu1",
        "outputId": "4ef7a5b9-ac1a-4571-a67e-08cbf9ba7e78"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pytorch-lightning in /usr/local/lib/python3.10/dist-packages (2.0.8)\n",
            "Requirement already satisfied: numpy>=1.17.2 in /usr/local/lib/python3.10/dist-packages (from pytorch-lightning) (1.23.5)\n",
            "Requirement already satisfied: torch>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from pytorch-lightning) (2.0.1+cu118)\n",
            "Requirement already satisfied: tqdm>=4.57.0 in /usr/local/lib/python3.10/dist-packages (from pytorch-lightning) (4.66.1)\n",
            "Requirement already satisfied: PyYAML>=5.4 in /usr/local/lib/python3.10/dist-packages (from pytorch-lightning) (6.0.1)\n",
            "Requirement already satisfied: fsspec[http]>2021.06.0 in /usr/local/lib/python3.10/dist-packages (from pytorch-lightning) (2023.6.0)\n",
            "Requirement already satisfied: torchmetrics>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from pytorch-lightning) (1.1.1)\n",
            "Requirement already satisfied: packaging>=17.1 in /usr/local/lib/python3.10/dist-packages (from pytorch-lightning) (23.1)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from pytorch-lightning) (4.7.1)\n",
            "Requirement already satisfied: lightning-utilities>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from pytorch-lightning) (0.9.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from fsspec[http]>2021.06.0->pytorch-lightning) (2.31.0)\n",
            "Requirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.10/dist-packages (from fsspec[http]>2021.06.0->pytorch-lightning) (3.8.5)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->pytorch-lightning) (3.12.2)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->pytorch-lightning) (1.12)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->pytorch-lightning) (3.1)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->pytorch-lightning) (3.1.2)\n",
            "Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.11.0->pytorch-lightning) (2.0.0)\n",
            "Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch>=1.11.0->pytorch-lightning) (3.27.2)\n",
            "Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch>=1.11.0->pytorch-lightning) (16.0.6)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (23.1.0)\n",
            "Requirement already satisfied: charset-normalizer<4.0,>=2.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (3.2.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (6.0.4)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (4.0.3)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.9.2)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.4.0)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>2021.06.0->pytorch-lightning) (1.3.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.11.0->pytorch-lightning) (2.1.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (3.4)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (2.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->fsspec[http]>2021.06.0->pytorch-lightning) (2023.7.22)\n",
            "Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.11.0->pytorch-lightning) (1.3.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install datasets"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5yV_rMVtZKml",
        "outputId": "3f553f5b-fa56-477e-d43b-3e29788c7d03"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: datasets in /usr/local/lib/python3.10/dist-packages (2.14.5)\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.10/dist-packages (from datasets) (1.23.5)\n",
            "Requirement already satisfied: pyarrow>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (9.0.0)\n",
            "Requirement already satisfied: dill<0.3.8,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (0.3.7)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from datasets) (1.5.3)\n",
            "Requirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (2.31.0)\n",
            "Requirement already satisfied: tqdm>=4.62.1 in /usr/local/lib/python3.10/dist-packages (from datasets) (4.66.1)\n",
            "Requirement already satisfied: xxhash in /usr/local/lib/python3.10/dist-packages (from datasets) (3.3.0)\n",
            "Requirement already satisfied: multiprocess in /usr/local/lib/python3.10/dist-packages (from datasets) (0.70.15)\n",
            "Requirement already satisfied: fsspec[http]<2023.9.0,>=2023.1.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (2023.6.0)\n",
            "Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from datasets) (3.8.5)\n",
            "Requirement already satisfied: huggingface-hub<1.0.0,>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from datasets) (0.16.4)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from datasets) (23.1)\n",
            "Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.10/dist-packages (from datasets) (6.0.1)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (23.1.0)\n",
            "Requirement already satisfied: charset-normalizer<4.0,>=2.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (3.2.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (6.0.4)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (4.0.3)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.9.2)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.4.0)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->datasets) (1.3.1)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0.0,>=0.14.0->datasets) (3.12.2)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0.0,>=0.14.0->datasets) (4.7.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->datasets) (3.4)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->datasets) (2.0.4)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.19.0->datasets) (2023.7.22)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->datasets) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->datasets) (2023.3)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas->datasets) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install tokenizers"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CLIdUuwyZLD3",
        "outputId": "7cdbbbe8-09aa-4472-ed48-07002d0c8cb4"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: tokenizers in /usr/local/lib/python3.10/dist-packages (0.13.3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install torchmetrics"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i-t5DT5aZNB5",
        "outputId": "3db29cff-86ff-4373-d151-b476b0113fb0"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: torchmetrics in /usr/local/lib/python3.10/dist-packages (1.1.1)\n",
            "Requirement already satisfied: numpy>1.20.0 in /usr/local/lib/python3.10/dist-packages (from torchmetrics) (1.23.5)\n",
            "Requirement already satisfied: torch>=1.8.1 in /usr/local/lib/python3.10/dist-packages (from torchmetrics) (2.0.1+cu118)\n",
            "Requirement already satisfied: lightning-utilities>=0.8.0 in /usr/local/lib/python3.10/dist-packages (from torchmetrics) (0.9.0)\n",
            "Requirement already satisfied: packaging>=17.1 in /usr/local/lib/python3.10/dist-packages (from lightning-utilities>=0.8.0->torchmetrics) (23.1)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from lightning-utilities>=0.8.0->torchmetrics) (4.7.1)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.1->torchmetrics) (3.12.2)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.1->torchmetrics) (1.12)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.1->torchmetrics) (3.1)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.1->torchmetrics) (3.1.2)\n",
            "Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.8.1->torchmetrics) (2.0.0)\n",
            "Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch>=1.8.1->torchmetrics) (3.27.2)\n",
            "Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch>=1.8.1->torchmetrics) (16.0.6)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.8.1->torchmetrics) (2.1.3)\n",
            "Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.8.1->torchmetrics) (1.3.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# config file\n",
        "\n",
        "\n",
        "from pathlib import Path\n",
        "def get_config():\n",
        "  return {\n",
        "      \"batch_size\": 1048,\n",
        "      \"num_epochs\" : 1,\n",
        "      \"lr\" : 10 **-4,\n",
        "      \"seq_len\": 500,\n",
        "      \"d_model\": 512,\n",
        "      \"lang_src\" : \"en\",\n",
        "      \"lang_tgt\": \"fr\",\n",
        "      \"model_folder\": \"weights\",\n",
        "      \"model_basename\": \"tmodel_\",\n",
        "      \"preload\": True,\n",
        "      \"tokenizer_file\": \"tokenizer_{0}.json\",\n",
        "      \"experiment_name\": \"runs/tmodel\",\n",
        "      \"num_workers\" : 1\n",
        "  }\n",
        "\n",
        "def get_weights_file_path(config, epoch: str):\n",
        "  model_folder = config[\"model_folder\"]\n",
        "  model_basename = config[\"model_basename\"]\n",
        "  model_filename = f\"{model_basename}{epoch}.pt\"\n",
        "  return str(Path('.') / model_folder/ model_filename)"
      ],
      "metadata": {
        "id": "UPrAztjVZRlt"
      },
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# model file\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import math\n",
        "\n",
        "class LayerNormalization(nn.Module):\n",
        "  def __init__(self, eps: float=10**-6) -> None:\n",
        "    super().__init__()\n",
        "    self.eps = eps\n",
        "    self.alpha = nn.Parameter(torch.ones(1)) # alpha is a learnable parameter\n",
        "    self.bias = nn.Parameter(torch.zeros(1)) # bias is a learnable parameter\n",
        "\n",
        "  def forward(self, x):\n",
        "    # x : batch_size, seq_len, hidden_size\\\n",
        "\n",
        "    # keep the dimension for broadcasting\n",
        "    mean = x.mean(dim = -1, keepdim = True)\n",
        "    # keep the dimension for broadcasting\n",
        "    std = x.std(dim = -1, keepdim = True)\n",
        "\n",
        "    # eps is to prevent dividing by zero or when std is very small\n",
        "    return self.alpha * (x - mean)/(std + self.eps) + self.bias\n",
        "\n",
        "class FeedForwardBlock(nn.Module):\n",
        "  def __init__(self, d_model:int, d_ff: int, dropout: float) -> None:\n",
        "    super().__init__()\n",
        "    self.linear_1 = nn.Linear(d_model, d_ff) # w1 and b1\n",
        "    self.dropout = nn.Dropout(dropout)\n",
        "    self.linear_2 = nn.Linear(d_ff, d_model) # w2 and b2\n",
        "\n",
        "  def forward(self, x):\n",
        "    # (batch, seq_len, d_model) --> (batch, seq_len, dff) --> (batch, seq_len, d_model)\n",
        "    return self.linear_2(self.dropout(torch.relu(self.linear_1(x))))\n",
        "\n",
        "class InputEmbeddings(nn.Module):\n",
        "  def __init__(self, d_model: int, vocab_size: int) -> None:\n",
        "    super().__init__()\n",
        "    self.d_model = d_model\n",
        "    self.vocab_size = vocab_size\n",
        "    self.embedding = nn.Embedding(vocab_size, d_model)\n",
        "\n",
        "  def forward(self, x):\n",
        "    # batch, seq_len  ---> batch, seq_len, d_model\n",
        "    # Multiple by sqrt(d_model) to scale embedings according to the paper\n",
        "    return self.embedding(x) * math.sqrt(self.d_model)\n",
        "\n",
        "class ResidualConnection(nn.Module):\n",
        "  def __init__(self, dropout : float) -> None:\n",
        "    super().__init__()\n",
        "    self.dropout = nn.Dropout(dropout)\n",
        "    self.norm = LayerNormalization()\n",
        "\n",
        "  def forward(self, x, sublayer):\n",
        "    return x + self.dropout(sublayer(self.norm(x)))\n",
        "\n",
        "\n",
        "class MultiHeadAttentionBlock(nn.Module):\n",
        "  def __init__(self, d_model:int, h:int, dropout:float) -> None:\n",
        "    super().__init__()\n",
        "    self.d_model = d_model\n",
        "    self.h = h # Number of heads\n",
        "\n",
        "    # Make sure d_model is divisible by h\n",
        "\n",
        "    assert d_model %h == 0, \"d_model is not divisible by h\"\n",
        "\n",
        "    self.d_k = d_model //h\n",
        "    self.w_q = nn.Linear(d_model, d_model, bias = False)\n",
        "    self.w_k = nn.Linear(d_model, d_model, bias = False)\n",
        "    self.w_v = nn.Linear(d_model, d_model, bias = False)\n",
        "    self.w_o = nn.Linear(d_model, d_model, bias = False)\n",
        "\n",
        "    self.dropout = nn.Dropout(dropout)\n",
        "\n",
        "\n",
        "  @staticmethod\n",
        "  def attention(query, key, value, mask, dropout: nn.Dropout):\n",
        "    d_k = query.shape[-1]\n",
        "\n",
        "    # Just apply the formula from paper\n",
        "    # (batch, h, seq_len, d_k) ---> (batch, h, seq_len, seq_len)\n",
        "    attention_scores = (query @ key.transpose(-2,-1)) / math.sqrt(d_k)\n",
        "\n",
        "    if mask is not None:\n",
        "      attention_scores.masked_fill_(mask == 0, -1e9)\n",
        "    attention_scores = attention_scores.softmax(dim=-1)\n",
        "    if dropout is not None:\n",
        "      attention_scores = dropout(attention_scores)\n",
        "\n",
        "    return (attention_scores @ value), attention_scores\n",
        "\n",
        "\n",
        "  def forward(self, q, k, v, mask):\n",
        "    query = self.w_q(q)\n",
        "    key = self.w_k(k)\n",
        "    value = self.w_v(v)\n",
        "    query = query.view(query.shape[0], query.shape[1], self.h, self.d_k).transpose(1,2)\n",
        "    key = key.view(key.shape[0], key.shape[1], self.h, self.d_k).transpose(1,2)\n",
        "    value = value.view(value.shape[0], value.shape[1], self.h, self.d_k).transpose(1,2)\n",
        "\n",
        "\n",
        "    x, self.attention_scores = MultiHeadAttentionBlock.attention(query, key, value, mask, self.dropout)\n",
        "\n",
        "\n",
        "    x = x.transpose(1,2).contiguous().view(x.shape[0], -1, self.h * self.d_k)\n",
        "\n",
        "    return self.w_o(x)\n",
        "\n",
        "class PositionalEncoding(nn.Module):\n",
        "  def __init__(self, d_model: int, seq_len: int, dropout: float) -> None:\n",
        "    super().__init__()\n",
        "    self.d_model = d_model\n",
        "    self.seq_len = seq_len\n",
        "    self.dropout = nn.Dropout(dropout)\n",
        "\n",
        "    # Create amtrix of shape (seq_len, d_model)\n",
        "    pe = torch.zeros(seq_len, d_model)\n",
        "\n",
        "    # Create a vector of shape (seq_len)\n",
        "    position = torch.arange(0, seq_len, dtype=torch.float).unsqueeze(1) # sql_len, 1\n",
        "    # Create a vector of shape (d_model)\n",
        "    div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0)/d_model))\n",
        "\n",
        "    # Apply sine to even indices\n",
        "\n",
        "    pe[:, 0::2] = torch.sin(position * div_term) # sin(position * 10000  (2i/d_model))\n",
        "\n",
        "    # Applu cosine to odd indices\n",
        "    pe[:, 1::2] = torch.cos(position * div_term) # cos(position *  10000 (2i/model))\n",
        "\n",
        "    pe = pe.unsqueeze(0) # (1, seq_len, d_model)\n",
        "\n",
        "    # Register the position encoding as a buffer\n",
        "    self.register_buffer('pe', pe)\n",
        "\n",
        "\n",
        "  def forward(self, x):\n",
        "    x = x + (self.pe[:, :x.shape[1], :]).requires_grad_(False) # (batch, seq_len, d_model)\n",
        "    return self.dropout(x)\n",
        "\n",
        "\n",
        "class EnocoderBlock(nn.Module):\n",
        "\n",
        "  def __init__(self, self_attention_block: MultiHeadAttentionBlock, feed_forward_block: FeedForwardBlock, dropout: float):\n",
        "\n",
        "    super().__init__()\n",
        "\n",
        "    self.self_attention_block = self_attention_block\n",
        "    self.feed_forward_block = feed_forward_block\n",
        "    self.residual_connections = nn.ModuleList([ResidualConnection(dropout) for _ in range(2)])\n",
        "\n",
        "  def forward(self, x, src_mask):\n",
        "    x =self.residual_connections[0](x, lambda x: self.self_attention_block(x, x, x, src_mask))\n",
        "    x = self.residual_connections[1](x, self.feed_forward_block)\n",
        "    return x\n",
        "\n",
        "class Encoder(nn.Module):\n",
        "  def __init__(self, layers: nn.ModuleList) -> None:\n",
        "\n",
        "    super().__init__()\n",
        "    self.layers = layers\n",
        "    self.norm = LayerNormalization()\n",
        "\n",
        "\n",
        "  def forward(self, x, mask):\n",
        "    for layer in self.layers:\n",
        "      x = layer(x, mask)\n",
        "    return self.norm(x)\n",
        "\n",
        "\n",
        "\n",
        "class DecoderBlock(nn.Module):\n",
        "  def __init__(self, self_attention_block: MultiHeadAttentionBlock, cross_attention_block : MultiHeadAttentionBlock, feed_forward_block, dropout):\n",
        "    super().__init__()\n",
        "    self.self_attention_block = self_attention_block\n",
        "    self.cross_attention_block = cross_attention_block\n",
        "    self.feed_forward_block = feed_forward_block\n",
        "    self.residual_connections = nn.ModuleList([ResidualConnection(dropout) for _ in range(3)])\n",
        "\n",
        "  def forward(self, x, encoder_output, src_mask, tgt_mask):\n",
        "    x = self.residual_connections[0](x, lambda x: self.self_attention_block(x, x, x, tgt_mask))\n",
        "    x = self.residual_connections[1](x, lambda x: self.self_attention_block(x, encoder_output, encoder_output, src_mask))\n",
        "    x =  self.residual_connections[2](x, self.feed_forward_block)\n",
        "    return x\n",
        "\n",
        "class Decoder(nn.Module):\n",
        "  def __init__(self, layers: nn.ModuleList) -> None:\n",
        "    super().__init__()\n",
        "    self.layers = layers\n",
        "    self.norm = LayerNormalization()\n",
        "\n",
        "  def forward(self, x, encoder_output, src_mask, tgt_mask):\n",
        "    for layer in self.layers:\n",
        "      x = layer(x, encoder_output, src_mask, tgt_mask)\n",
        "    return self.norm(x)\n",
        "\n",
        "class ProjectionLayer(nn.Module):\n",
        "  def __init__(self, d_model, vocab_size) -> None:\n",
        "    super().__init__()\n",
        "    self.proj = nn.Linear(d_model, vocab_size)\n",
        "\n",
        "  def forward(self, x) -> None:\n",
        "    return torch.log_softmax(self.proj(x), dim = -1)\n",
        "\n",
        "\n",
        "class Transformer(nn.Module):\n",
        "\n",
        "  def __init__(self, encoder: Encoder, decoder: Decoder, src_embed: InputEmbeddings, tgt_embed: InputEmbeddings, src_pos: PositionalEncoding, tgt_pos: PositionalEncoding, projection_layer: ProjectionLayer):\n",
        "    super().__init__()\n",
        "    self.encoder = encoder\n",
        "    self.decoder = decoder\n",
        "    self.src_embed = src_embed\n",
        "    self.tgt_embed = tgt_embed\n",
        "    self.src_pos = src_pos\n",
        "    self.tgt_pos = tgt_pos\n",
        "    self.projection_layer = projection_layer\n",
        "\n",
        "  def encode(self,src, src_mask):\n",
        "    src = self.src_embed(src)\n",
        "    src = self.src_pos(src)\n",
        "    return self.encoder(src, src_mask)\n",
        "\n",
        "  def decode(self, encoder_output: torch.Tensor, src_mask: torch.Tensor, tgt: torch.Tensor, tgt_mask):\n",
        "    tgt = self.tgt_embed(tgt)\n",
        "    tgt = self.tgt_pos(tgt)\n",
        "    return self.decoder(tgt, encoder_output, src_mask, tgt_mask)\n",
        "\n",
        "  def project(self, x):\n",
        "    return self.projection_layer(x)\n",
        "\n",
        "\n",
        "def build_transformer(src_vocab_size, tgt_vocab_size, src_seq_len, tgt_seq_len, d_model, N: int = 6, h: int = 8,  dropout: float=0.1, d_ff: int=2048) -> Transformer:\n",
        "    src_embed = InputEmbeddings(d_model, src_vocab_size)\n",
        "    tgt_embed = InputEmbeddings(d_model, tgt_vocab_size)\n",
        "\n",
        "\n",
        "    # Create the positional encoding layerrs\n",
        "\n",
        "    src_pos = PositionalEncoding(d_model, src_seq_len, dropout)\n",
        "    tgt_pos = PositionalEncoding(d_model, tgt_seq_len, dropout)\n",
        "\n",
        "\n",
        "    # Create the encoder blocks\n",
        "    encoder_blocks = []\n",
        "\n",
        "    for _ in range(N):\n",
        "      encoder_self_attention_block = MultiHeadAttentionBlock(d_model, h, dropout)\n",
        "      feed_forward_block = FeedForwardBlock(d_model, d_ff, dropout)\n",
        "      encoder_block = EnocoderBlock(encoder_self_attention_block, feed_forward_block, dropout)\n",
        "      encoder_blocks.append(encoder_block)\n",
        "\n",
        "    # Create decoder blocks\n",
        "\n",
        "    decoder_blocks = []\n",
        "    for _ in range(N):\n",
        "      decoder_self_attention_block = MultiHeadAttentionBlock(d_model, h, dropout)\n",
        "      decoder_cross_attention_mask = MultiHeadAttentionBlock(d_model, h, dropout)\n",
        "      feed_forward_block = FeedForwardBlock(d_model, d_ff, dropout)\n",
        "      decoder_block = DecoderBlock(decoder_self_attention_block, decoder_cross_attention_mask, feed_forward_block, dropout)\n",
        "      decoder_blocks.append(decoder_block)\n",
        "\n",
        "    encoder = Encoder(nn.ModuleList(encoder_blocks))\n",
        "    decoder = Decoder(nn.ModuleList(decoder_blocks))\n",
        "\n",
        "    projection_layer = ProjectionLayer(d_model, tgt_vocab_size)\n",
        "\n",
        "    transformer = Transformer(encoder, decoder, src_embed, tgt_embed, src_pos, tgt_pos, projection_layer)\n",
        "\n",
        "\n",
        "    # Initialize the parameters\n",
        "    for p in transformer.parameters():\n",
        "      if p.dim() > 1:\n",
        "        nn.init.xavier_uniform_(p)\n",
        "\n",
        "    return transformer\n",
        "\n"
      ],
      "metadata": {
        "id": "j5Ceq7ZfZR9N"
      },
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "8pMNjXymhN58"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "snf = get_config()\n",
        "\n",
        "raw_dataset = load_dataset('opus_books',f\"{snf['lang_src']}-{snf['lang_tgt']}\", split='train')"
      ],
      "metadata": {
        "id": "p5n3fWt_hOgn"
      },
      "execution_count": 89,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import datasets\n",
        "\n",
        "z = [\n",
        "\n",
        "     {'id': '0', 'translation': {'en': 'THE BOARDER', 'fr': 'LE PENSIONNAIRE'}}\n",
        "\n",
        "]\n",
        "\n",
        "r = datasets.Dataset.from_list(z)\n",
        "\n",
        "r"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2RHueMr9mNsU",
        "outputId": "385b4e1b-7ebe-48d2-a882-dd247b770fa3"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Dataset({\n",
              "    features: ['id', 'translation'],\n",
              "    num_rows: 1\n",
              "})"
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_dataset = []\n",
        "new_index = 0\n",
        "for index, each_dataset in enumerate(raw_dataset):\n",
        "\n",
        "    src_text = each_dataset['translation']['en']\n",
        "    tgt_text = each_dataset['translation']['fr']\n",
        "\n",
        "    if len(src_text) > 150 or len(tgt_text) > len(src_text) + 10:\n",
        "      continue\n",
        "\n",
        "    new_dataset.append(\n",
        "        {'id': new_index, 'translation': {'en': src_text, 'fr': tgt_text}}\n",
        "\n",
        "    )\n",
        "    new_index += 1\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "x-SXIoJMhwdv"
      },
      "execution_count": 110,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_data = datasets.Dataset.from_list(new_dataset)"
      ],
      "metadata": {
        "id": "rvDa0HzdovAG"
      },
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "raw_dataset, new_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "26AAu75xpHH7",
        "outputId": "89992f75-d3f0-4d0f-af27-514378347867"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(Dataset({\n",
              "     features: ['id', 'translation'],\n",
              "     num_rows: 127085\n",
              " }),\n",
              " Dataset({\n",
              "     features: ['id', 'translation'],\n",
              "     num_rows: 70784\n",
              " }))"
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# dataset.py file\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.utils.data import Dataset\n",
        "import torchtext.datasets as datasets\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.utils.data import Dataset, DataLoader, random_split\n",
        "\n",
        "\n",
        "import warnings\n",
        "from tqdm.notebook import tqdm\n",
        "import os\n",
        "from pathlib import Path\n",
        "\n",
        "\n",
        "# Huggingface datasets and tokenizers\n",
        "from datasets import load_dataset\n",
        "from tokenizers import Tokenizer\n",
        "from tokenizers.models import WordLevel\n",
        "from tokenizers.trainers import WordLevelTrainer\n",
        "from tokenizers.pre_tokenizers import Whitespace\n",
        "import pytorch_lightning as pl\n",
        "\n",
        "class BilinualDataset(Dataset):\n",
        "  def __init__(self, ds, tokenizer_src, tokenizer_tgt, src_lang, tgt_lang, seq_len):\n",
        "    super().__init__()\n",
        "    self.seq_len = seq_len\n",
        "\n",
        "    self.ds = ds\n",
        "    self.tokenizer_src = tokenizer_src\n",
        "    self.tokenizer_tgt = tokenizer_tgt\n",
        "    self.src_lang = src_lang\n",
        "    self.tgt_lang = tgt_lang\n",
        "\n",
        "    self.sos_token = torch.tensor([tokenizer_tgt.token_to_id(\"[SOS]\")], dtype=torch.int64)\n",
        "    self.eos_token = torch.tensor([tokenizer_tgt.token_to_id(\"[EOS]\")], dtype=torch.int64)\n",
        "    self.pad_token = torch.tensor([tokenizer_tgt.token_to_id(\"[PAD]\")], dtype=torch.int64)\n",
        "\n",
        "\n",
        "  def __len__(self):\n",
        "    return len(self.ds)\n",
        "\n",
        "  def __getitem__(self, idx):\n",
        "    src_target_pair = self.ds[idx]\n",
        "    src_text = src_target_pair['translation'][self.src_lang]\n",
        "    tgt_text = src_target_pair['translation'][self.tgt_lang]\n",
        "\n",
        "    enc_input_tokens = self.tokenizer_src.encode(src_text).ids\n",
        "    dec_input_tokens = self.tokenizer_tgt.encode(tgt_text).ids\n",
        "\n",
        "    # enc_num_padding_tokens = self.seq_len - len(enc_input_tokens) - 2\n",
        "\n",
        "    # dec_num_padding_tokens = self.seq_len - len(dec_input_tokens) - 1\n",
        "\n",
        "    # if enc_num_padding_tokens < 0 or dec_num_padding_tokens < 0:\n",
        "    #   raise ValueError(\"Sentence is too long\")\n",
        "\n",
        "    encoder_input = torch.cat(\n",
        "        [\n",
        "            self.sos_token,\n",
        "            torch.tensor(enc_input_tokens, dtype=torch.int64),\n",
        "            self.eos_token,\n",
        "            # torch.tensor([self.pad_token] * enc_num_padding_tokens, dtype=torch.int64),\n",
        "        ],\n",
        "        dim=0,\n",
        "    )\n",
        "\n",
        "    decoder_input = torch.cat(\n",
        "        [\n",
        "            self.sos_token,\n",
        "            torch.tensor(dec_input_tokens, dtype=torch.int64),\n",
        "            # torch.tensor([self.pad_token] * dec_num_padding_tokens, dtype=torch.int64),\n",
        "        ],\n",
        "        dim=0,\n",
        "    )\n",
        "\n",
        "    label = torch.cat(\n",
        "        [\n",
        "            torch.tensor(dec_input_tokens, dtype=torch.int64),\n",
        "            self.eos_token,\n",
        "            # torch.tensor([self.pad_token] * dec_num_padding_tokens, dtype=torch.int64),\n",
        "        ],\n",
        "        dim=0,\n",
        "    )\n",
        "\n",
        "    # assert encoder_input.size(0) == self.seq_len\n",
        "    # assert decoder_input.size(0) == self.seq_len\n",
        "    # assert label.size(0) == self.seq_len\n",
        "\n",
        "    return {\n",
        "        \"encoder_input\" : encoder_input,\n",
        "        \"decoder_input\": decoder_input,\n",
        "        # \"encoder_mask\": (encoder_input != self.pad_token).unsqueeze(0).unsqueeze(0).int(),\n",
        "        # \"decoder_mask\" : (decoder_input != self.pad_token).unsqueeze(0).int() & causal_mask(decoder_input.size(0)),\n",
        "        \"label\" : label,\n",
        "        \"src_text\": src_text,\n",
        "        \"tgt_text\": tgt_text,\n",
        "\n",
        "    }\n",
        "\n",
        "\n",
        "class BilinualDataModule(pl.LightningDataModule):\n",
        "    def __init__(self, config):\n",
        "        super().__init__()\n",
        "\n",
        "        self.config = config\n",
        "\n",
        "    def setup(self, stage):\n",
        "        ds_raw = load_dataset('opus_books',f\"{self.config['lang_src']}-{self.config['lang_tgt']}\", split='train')\n",
        "\n",
        "        self.tokenizer_src = self.get_or_build_tokenizer( ds_raw, self.config['lang_src'])\n",
        "        self.tokenizer_tgt = self.get_or_build_tokenizer(ds_raw, self.config['lang_tgt'])\n",
        "        train_ds_size = int(0.9 * len(ds_raw))\n",
        "        val_ds_size = len(ds_raw) - train_ds_size\n",
        "        train_ds_raw, val_ds_raw = random_split(ds_raw, [train_ds_size, val_ds_size])\n",
        "        self.train_ds = BilinualDataset(train_ds_raw, self.tokenizer_src, self.tokenizer_tgt, self.config['lang_src'], self.config['lang_tgt'], self.config['seq_len'])\n",
        "        self.val_ds = BilinualDataset(val_ds_raw, self.tokenizer_src, self.tokenizer_tgt, self.config['lang_src'], self.config['lang_tgt'], self.config['seq_len'])\n",
        "\n",
        "        max_len_src = 0\n",
        "        max_len_tgt = 0\n",
        "\n",
        "        for item in ds_raw:\n",
        "\n",
        "          src_ids = self.tokenizer_src.encode(item['translation'][self.config['lang_src']]).ids\n",
        "          tgt_ids = self.tokenizer_tgt.encode(item['translation'][self.config['lang_tgt']]).ids\n",
        "\n",
        "          max_len_src = max(max_len_src, len(src_ids))\n",
        "          max_len_tgt = max(max_len_tgt, len(tgt_ids))\n",
        "\n",
        "        print(f'Max length of soruce sentence:: {max_len_src}')\n",
        "        print(f'Max length of target sentence:: {max_len_tgt}')\n",
        "\n",
        "    def train_dataloader(self):\n",
        "        return DataLoader(\n",
        "            self.train_ds,\n",
        "            batch_size=self.config['batch_size'],\n",
        "            num_workers=self.config['num_workers'], # TODO: Add this code to config\n",
        "            shuffle=True,\n",
        "            collate_fn = lambda batch : collate_fn(batch, self.tokenizer_tgt)\n",
        "        )\n",
        "\n",
        "    def val_dataloader(self):\n",
        "        return DataLoader(\n",
        "            self.val_ds,\n",
        "            batch_size=1,\n",
        "            num_workers=self.config['num_workers'], # TODO: Add this code to config\n",
        "            shuffle=True,\n",
        "            collate_fn = lambda batch : collate_fn(batch, self.tokenizer_tgt)\n",
        "        )\n",
        "\n",
        "    def test_dataloader(self):\n",
        "         return DataLoader(\n",
        "            self.val_ds,\n",
        "            batch_size=1,\n",
        "            num_workers=self.config['num_workers'], # TODO: Add this code to config\n",
        "            shuffle=True,\n",
        "            collate_fn = lambda batch : collate_fn(batch, self.tokenizer_tgt)\n",
        "        )\n",
        "\n",
        "    def get_or_build_tokenizer(self, ds, lang):\n",
        "      tokenizer_path = Path(self.config['tokenizer_file'].format(lang))\n",
        "      if not Path.exists(tokenizer_path):\n",
        "        tokenizer = Tokenizer(WordLevel(unk_token=\"[UNK]\"))\n",
        "\n",
        "        tokenizer.pre_tokenizer = Whitespace()\n",
        "        trainer = WordLevelTrainer(special_tokens=[\"[UNK]\", \"[PAD]\", \"[SOS]\", \"[EOS]\"], min_frequency = 2)\n",
        "\n",
        "        tokenizer.train_from_iterator(self.get_all_sentences(ds, lang), trainer=trainer)\n",
        "\n",
        "        tokenizer.save(str(tokenizer_path))\n",
        "      else:\n",
        "        tokenizer = Tokenizer.from_file(str(tokenizer_path))\n",
        "      return tokenizer\n",
        "\n",
        "    def get_all_sentences(self, ds, lang):\n",
        "      for item in ds:\n",
        "        yield item['translation'][lang]\n",
        "\n",
        "    def get_tokenizers(self):\n",
        "      return self.tokenizer_src, self.tokenizer_tgt\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def causal_mask(size):\n",
        "  mask = torch.triu(torch.ones((1, size, size)), diagonal=1).type(torch.int)\n",
        "  return mask == 0\n",
        "\n",
        "\n",
        "def collate_fn(batch, tokenizer_tgt):\n",
        "      encoder_inputs, decoder_inputs, labels, src_texts, tgt_texts = zip(*batch)\n",
        "      decoder_inputs = [item['decoder_input'] for item in batch]\n",
        "      encoder_inputs = [item['encoder_input'] for item in batch]\n",
        "      src_texts = [item['src_text'] for item in batch]\n",
        "      tgt_texts = [item['tgt_text'] for item in batch]\n",
        "      labels = [item['label'] for item in batch]\n",
        "      pad_token = torch.tensor([tokenizer_tgt.token_to_id(\"[PAD]\")], dtype=torch.int64)\n",
        "      max_decoder_length = max(len(seq) for seq in decoder_inputs)\n",
        "      max_encoder_length = max(len(seq) for seq in encoder_inputs)\n",
        "      # print(f\"Max encoder Length: {max_encoder_length}\")\n",
        "      # print(f\"Max decoder Length: {max_decoder_length}\")\n",
        "      padded_decoder_inputs = []\n",
        "      padded_encoder_inputs = []\n",
        "      padded_label_inputs = []\n",
        "      encoder_masks = []\n",
        "      decoder_masks = []\n",
        "\n",
        "      for  decoder, encoder, label in zip(decoder_inputs, encoder_inputs, labels):\n",
        "        decoder_padding_length = max_decoder_length - len(decoder)\n",
        "        encoder_padding_length = max_encoder_length - len(encoder)\n",
        "\n",
        "        # print(\"Len of encoder\", len(encoder))\n",
        "        # print(\"Len of decoder\", len(decoder))\n",
        "        # print(\"Encoder padding length\", encoder_padding_length)\n",
        "        # print(\"Decoder padding length\", decoder_padding_length)\n",
        "\n",
        "        encoder_input = torch.cat(\n",
        "          [\n",
        "              encoder,\n",
        "              torch.tensor([pad_token] * encoder_padding_length, dtype=torch.int64),\n",
        "          ],\n",
        "          dim=0,\n",
        "        )\n",
        "        padded_encoder_inputs.append(encoder_input)\n",
        "\n",
        "\n",
        "\n",
        "        decoder_input = torch.cat(\n",
        "          [\n",
        "              decoder,\n",
        "              torch.tensor([pad_token] * decoder_padding_length, dtype=torch.int64),\n",
        "          ],\n",
        "          dim=0,\n",
        "        )\n",
        "        padded_decoder_inputs.append(decoder_input)\n",
        "\n",
        "\n",
        "\n",
        "        label_input = torch.cat(\n",
        "          [\n",
        "              label,\n",
        "              torch.tensor([pad_token] * decoder_padding_length, dtype=torch.int64),\n",
        "          ],\n",
        "          dim=0,\n",
        "        )\n",
        "        padded_label_inputs.append(label_input)\n",
        "\n",
        "\n",
        "        encoders_mask =     (encoder_input != pad_token).unsqueeze(0).unsqueeze(0).int()\n",
        "\n",
        "        encoder_masks.append(encoders_mask)\n",
        "\n",
        "        decoder_mask =  (decoder_input != pad_token).unsqueeze(0).int() & causal_mask(decoder_input.size(0))\n",
        "\n",
        "        decoder_masks.append(decoder_mask)\n",
        "\n",
        "\n",
        "      return  {\n",
        "         \"encoder_input\" : torch.stack(padded_encoder_inputs),\n",
        "        \"decoder_input\": torch.stack(padded_decoder_inputs),\n",
        "         \"encoder_mask\": torch.stack(encoder_masks),\n",
        "         \"decoder_mask\": torch.stack(decoder_masks),\n",
        "        \"label\" :  torch.stack(padded_label_inputs),\n",
        "        \"src_text\":  src_texts,\n",
        "        \"tgt_text\":  tgt_texts,\n",
        "      }\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "eEGJB5PDZUaI"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# import warnings\n",
        "# # from dataset import BilinualDataset, BilinualDataModule\n",
        "\n",
        "# # Ignore all warnings\n",
        "# warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "# cfg = get_config()\n",
        "\n",
        "# cfg['batch_size'] = 6\n",
        "# cfg['preload'] = None\n",
        "# cfg['num_epochs'] = 1\n",
        "\n",
        "# dm = BilinualDataModule(cfg)\n",
        "# # dm.setup('val')\n",
        "# dm.setup('train')\n",
        "# # dm.setup('test')\n",
        "\n",
        "# train_loader = dm.train_dataloader()\n"
      ],
      "metadata": {
        "id": "qxbv3nVDZWww"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# tokenizer_src, tokenizer_tgt = dm.get_tokenizers()"
      ],
      "metadata": {
        "id": "KK1AuIOXZjPT"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# en = []\n",
        "# do = []\n",
        "# la = []\n",
        "\n",
        "# for i in iter(train_loader):\n",
        "#   en.append(i['encoder_input'].shape[1])\n",
        "#   do.append(i['decoder_input'].shape[1])\n",
        "#   la.append(i['label'].shape[1])"
      ],
      "metadata": {
        "id": "T5RcMAuCl3HZ"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# en_total = 0\n",
        "# for j in en:\n",
        "#   en_total += j *6\n"
      ],
      "metadata": {
        "id": "n_K78YVVmxp_"
      },
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# en_total # 1902876"
      ],
      "metadata": {
        "id": "1e9itLh6qU6m"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# len(train_loader) # 4850"
      ],
      "metadata": {
        "id": "aja2Ks93qfpZ"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 4850 * 309 * 6 = 8991900"
      ],
      "metadata": {
        "id": "Kdk8GescqktG"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# next(iter(train_loader))['encoder_mask']"
      ],
      "metadata": {
        "id": "TThvhXn-qqLN"
      },
      "execution_count": 70,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# train.py\n",
        "\n",
        "# from model import build_transformer\n",
        "# from dataset import BilinualDataset, casual_mask\n",
        "# from config import get_config, get_weights_file_path\n",
        "\n",
        "import torchtext.datasets as datasets\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from torch.utils.data import Dataset, DataLoader, random_split\n",
        "from torch.optim.lr_scheduler import LambdaLR\n",
        "\n",
        "import warnings\n",
        "from tqdm.notebook import tqdm\n",
        "import os\n",
        "from pathlib import Path\n",
        "\n",
        "\n",
        "# Huggingface datasets and tokenizers\n",
        "from datasets import load_dataset\n",
        "from tokenizers import Tokenizer\n",
        "from tokenizers.models import WordLevel\n",
        "from tokenizers.trainers import WordLevelTrainer\n",
        "from tokenizers.pre_tokenizers import Whitespace\n",
        "\n",
        "import torchmetrics\n",
        "from torch.utils.tensorboard import SummaryWriter\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "\n",
        "import pytorch_lightning as pl\n",
        "from torch.optim.lr_scheduler import OneCycleLR\n",
        "\n",
        "import torch\n",
        "# import config\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "# import utils\n",
        "\n",
        "class TextTranslator(pl.LightningModule):\n",
        "    def __init__(self, model, tokenizer_src, tokenizer_tgt, config, validation_ds, least_loss):\n",
        "        super().__init__()\n",
        "        self.model = model\n",
        "        self.tokenizer_src = tokenizer_src\n",
        "        self.tokenizer_tgt = tokenizer_tgt\n",
        "        self.config = config\n",
        "        self.validation_ds = validation_ds\n",
        "        self.loss_fn = nn.CrossEntropyLoss(ignore_index=self.tokenizer_src.token_to_id('[PAD]'), label_smoothing=0.1)\n",
        "        self.least_loss =  least_loss\n",
        "\n",
        "        self.losses = []\n",
        "\n",
        "\n",
        "        Path(self.config['model_folder']).mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "\n",
        "    def forward(self, x):\n",
        "      return self.model(x)\n",
        "\n",
        "    def training_step(self, batch, batch_idx):\n",
        "\n",
        "        encoder_input = batch['encoder_input']\n",
        "        decoder_input = batch['decoder_input']\n",
        "        encoder_mask = batch['encoder_mask']\n",
        "        decoder_mask = batch['decoder_mask']\n",
        "\n",
        "        encoder_output = self.model.encode(encoder_input, encoder_mask)\n",
        "        decoder_output = self.model.decode(encoder_output, encoder_mask, decoder_input, decoder_mask)\n",
        "        proj_output = self.model.project(decoder_output)\n",
        "\n",
        "        label = batch['label']\n",
        "        loss = self.loss_fn(proj_output.view(-1, self.tokenizer_tgt.get_vocab_size()), label.view(-1))\n",
        "        self.log(\"train_loss\", loss.item(), prog_bar=True)\n",
        "        self.losses.append(loss.item())\n",
        "\n",
        "        return loss\n",
        "\n",
        "    def on_train_epoch_end(self):\n",
        "        avg_epoch_loss = np.mean(self.losses)\n",
        "        print(f\"Loss for epoch {self.trainer.current_epoch} is {avg_epoch_loss}\")\n",
        "        self.losses.clear()\n",
        "        prev_loss = self.least_loss\n",
        "        self.least_loss = min(avg_epoch_loss,self.least_loss )\n",
        "        model_filename = get_weights_file_path(self.config, f\"{self.trainer.current_epoch:02d}\")\n",
        "        if prev_loss > avg_epoch_loss:\n",
        "          print('Saving Model')\n",
        "          torch.save({\n",
        "            'epoch': self.trainer.current_epoch,\n",
        "            'model_state_dict': self.state_dict(),\n",
        "            'optimizer_state_dict': self.trainer.optimizers[0].state_dict(),\n",
        "            'loss' : self.least_loss,\n",
        "        }, model_filename)\n",
        "\n",
        "        run_validation(self.model, self.validation_ds, self.tokenizer_src, self.tokenizer_tgt,  self.config['seq_len'], self.device, lambda msg: print(msg), self.global_step, lambda x,y: self.log(x,y) )\n",
        "\n",
        "\n",
        "\n",
        "    def configure_optimizers(self):\n",
        "        optimizer = torch.optim.Adam(self.model.parameters(), lr = self.config['lr'], eps=1e-9)\n",
        "\n",
        "        return [ optimizer]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def greedy_decode(model, source, source_mask, tokenizer_src, tokenizer_tgt, max_len, device):\n",
        "  sos_idx = tokenizer_tgt.token_to_id('[SOS]')\n",
        "  eos_idx = tokenizer_tgt.token_to_id('[EOS]')\n",
        "\n",
        "  # pre compute the encoder output and reuse it for every step\n",
        "  encoder_output = model.encode(source, source_mask)\n",
        "\n",
        "  decoder_input = torch.empty(1,1).fill_(sos_idx).type_as(source).to(device)\n",
        "  while True:\n",
        "    if decoder_input.size(1) == max_len:\n",
        "      break\n",
        "    decoder_mask = causal_mask(decoder_input.size(1)).type_as(source_mask).to(device)\n",
        "\n",
        "    # calcualte output\n",
        "    out = model.decode(encoder_output, source_mask, decoder_input, decoder_mask)\n",
        "\n",
        "    # get next token\n",
        "    prob = model.project(out[:, -1])\n",
        "\n",
        "    _, next_word = torch.max(prob, dim=1)\n",
        "    decoder_input = torch.cat(\n",
        "        [decoder_input, torch.empty(1,1).type_as(source).fill_(next_word.item()).to(device)], dim=1\n",
        "    )\n",
        "    if next_word == eos_idx:\n",
        "      break\n",
        "  return decoder_input.squeeze(0)\n",
        "\n",
        "# def get_all_sentences(ds, lang):\n",
        "#   for item in ds:\n",
        "\n",
        "#     yield item['translation'][lang]\n",
        "\n",
        "# def get_or_build_tokenizer(config, ds, lang):\n",
        "#   tokenizer_path = Path(config['tokenizer_file'].format(lang))\n",
        "#   if not Path.exists(tokenizer_path):\n",
        "#     tokenizer = Tokenizer(WordLevel(unk_token=\"[UNK]\"))\n",
        "\n",
        "#     tokenizer.pre_tokenizer = Whitespace()\n",
        "#     trainer = WordLevelTrainer(special_tokens=[\"[UNK]\", \"[PAD]\", \"[SOS]\", \"[EOS]\"], min_frequency = 2)\n",
        "\n",
        "#     tokenizer.train_from_iterator(get_all_sentences(ds, lang), trainer=trainer)\n",
        "#     print(tokenizer)\n",
        "#     tokenizer.save(str(tokenizer_path))\n",
        "#   else:\n",
        "#     tokenizer = Tokenizer.from_file(str(tokenizer_path))\n",
        "#   return tokenizer\n",
        "\n",
        "# def get_ds(config):\n",
        "\n",
        "#   ds_raw = load_dataset('opus_books',f\"{config['lang_src']}-{config['lang_tgt']}\", split='train')\n",
        "#   print(f\"{config['lang_src']}-{config['lang_tgt']}\")\n",
        "\n",
        "#   tokenizer_src = get_or_build_tokenizer(config, ds_raw, config['lang_src'])\n",
        "#   tokenizer_tgt = get_or_build_tokenizer(config, ds_raw, config['lang_tgt'])\n",
        "\n",
        "\n",
        "\n",
        "#   train_ds_size = int(0.9 * len(ds_raw))\n",
        "#   val_ds_size = len(ds_raw) - train_ds_size\n",
        "#   train_ds_raw, val_ds_raw = random_split(ds_raw, [train_ds_size, val_ds_size])\n",
        "\n",
        "\n",
        "#   train_ds = BilinualDataset(train_ds_raw, tokenizer_src, tokenizer_tgt, config['lang_src'], config['lang_tgt'], config['seq_len'])\n",
        "#   val_ds = BilinualDataset(val_ds_raw, tokenizer_src, tokenizer_tgt, config['lang_src'], config['lang_tgt'], config['seq_len'])\n",
        "\n",
        "\n",
        "#   max_len_src = 0\n",
        "#   max_len_tgt = 0\n",
        "\n",
        "\n",
        "#   for item in ds_raw:\n",
        "\n",
        "#     src_ids = tokenizer_src.encode(item['translation'][config['lang_src']]).ids\n",
        "#     tgt_ids = tokenizer_tgt.encode(item['translation'][config['lang_tgt']]).ids\n",
        "\n",
        "\n",
        "\n",
        "#     max_len_src = max(max_len_src, len(src_ids))\n",
        "#     max_len_tgt = max(max_len_tgt, len(tgt_ids))\n",
        "\n",
        "\n",
        "#   print(f'Max length of soruce sentence:: {max_len_src}')\n",
        "#   print(f'Max length of target sentence:: {max_len_tgt}')\n",
        "\n",
        "#   train_dataloader = DataLoader(train_ds, batch_size=config['batch_size'], shuffle = True)\n",
        "#   val_dataloader = DataLoader(val_ds, batch_size=1, shuffle=True)\n",
        "\n",
        "#   return train_dataloader, val_dataloader, tokenizer_src, tokenizer_tgt\n",
        "\n",
        "def get_model(config, vocab_src_len, vocab_tgt_len):\n",
        "  model = build_transformer(vocab_src_len, vocab_tgt_len, config[\"seq_len\"], config[\"seq_len\"], d_model=config['d_model'])\n",
        "  return model\n",
        "\n",
        "# def train_model(config):\n",
        "#   # device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "#   # print(\"Using device: \", device)\n",
        "\n",
        "\n",
        "#   # Path(config['model_folder']).mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "#   # train_dataloader, val_dataloader, tokenizer_src, tokenizer_tgt = get_ds(config)\n",
        "\n",
        "#   # model = get_model(config, tokenizer_src.get_vocab_size(), tokenizer_tgt.get_vocab_size()).to(device)\n",
        "\n",
        "\n",
        "#   # Tensor board\n",
        "#   # writer = SummaryWriter(config['experiment_name'])\n",
        "#   # optimizer = torch.optim.Adam(model.parameters(), lr = config['lr'], eps=1e-9)\n",
        "\n",
        "#   initial_epoch = 0\n",
        "#   global_step = 0\n",
        "\n",
        "#   if config['preload']:\n",
        "#     model_filename =  get_weights_file_path(config, config['preload'])\n",
        "#     print(f'Preloadiing model {model_filename}')\n",
        "#     state = torch.load(model_filename)\n",
        "#     model.load_state_dict(state['model_state_dict'])\n",
        "#     initial_epoch = state['epoch'] + 1\n",
        "#     optimizer.load_state_dict(state['optimizer_state_dict'])\n",
        "#     global_step = state['gloabal_step']\n",
        "#     print('preloaded')\n",
        "\n",
        "#   # loss_fn = nn.CrossEntropyLoss(ignore_index=tokenizer_src.token_to_id('[PAD]'), label_smoothing=0.1).to(device)\n",
        "\n",
        "#   for epoch in range(initial_epoch, config['num_epochs']):\n",
        "#     torch.cuda.empty_cache()\n",
        "#     model.train()\n",
        "\n",
        "#     batch_iterator = tqdm(train_dataloader, desc=f\"Processing Epoch {epoch:02d}\", mininterval=5)\n",
        "#     for batch in batch_iterator:\n",
        "#       encoder_input = batch['encoder_input'].to(device)\n",
        "#       decoder_input = batch['decoder_input'].to(device)\n",
        "#       encoder_mask = batch['encoder_mask'].to(device)\n",
        "#       decoder_mask = batch['decoder_mask'].to(device)\n",
        "\n",
        "#       encoder_output = model.encode(encoder_input, encoder_mask)\n",
        "#       decoder_output = model.decode(encoder_output, encoder_mask, decoder_input, decoder_mask)\n",
        "#       proj_output = model.project(decoder_output)\n",
        "\n",
        "\n",
        "#       label = batch['label'].to(device)\n",
        "\n",
        "#       loss = loss_fn(proj_output.view(-1, tokenizer_tgt.get_vocab_size()), label.view(-1))\n",
        "\n",
        "#       batch_iterator.set_postfix({\"loss\": f\"{loss.item():6.3f}\"})\n",
        "\n",
        "\n",
        "#       writer.add_scalar('train loss', loss.item(), global_step)\n",
        "#       writer.flush()\n",
        "\n",
        "#       loss.backward()\n",
        "#       optimizer.step()\n",
        "#       optimizer.zero_grad(set_to_none=True)\n",
        "\n",
        "#       global_step += 1\n",
        "\n",
        "#     run_validation(model, val_dataloader, tokenizer_src, tokenizer_tgt, config['seq_len'], device, lambda msg: print(msg), global_step, lambda x,y: self.log(x, y))\n",
        "\n",
        "#     model_filename = get_weights_file_path(config, f\"{epoch:02d}\")\n",
        "\n",
        "#     torch.save({\n",
        "#           'epoch': epoch,\n",
        "#           'model_state_dict': model.state_dict(),\n",
        "#           'optimizer_state_dict': optimizer.state_dict(),\n",
        "#           'gloabal_step': global_step\n",
        "#       }, model_filename)\n",
        "\n",
        "\n",
        "def run_validation(model, validation_ds, tokenizer_src, tokenizer_tgt, max_len, device, print_msg, global_step, writer, num_examples=2):\n",
        "  model.eval()\n",
        "  count = 0\n",
        "\n",
        "  source_texts = []\n",
        "  expected = []\n",
        "  predicted = []\n",
        "\n",
        "\n",
        "  try:\n",
        "    with os.popen('stty size', r) as console:\n",
        "      _, console_width = console.read().split()\n",
        "      console_width = int(console_width)\n",
        "\n",
        "  except:\n",
        "    console_width = 80\n",
        "\n",
        "\n",
        "  with torch.no_grad():\n",
        "    for batch in validation_ds:\n",
        "      count += 1\n",
        "      encoder_input = batch['encoder_input'].to(device)\n",
        "      encoder_mask = batch['encoder_mask'].to(device)\n",
        "\n",
        "      assert encoder_input.size(\n",
        "          0) == 1, \"Batch size must be 1 for validation\"\n",
        "\n",
        "      model_out = greedy_decode(model, encoder_input, encoder_mask, tokenizer_src, tokenizer_tgt, max_len, device)\n",
        "\n",
        "\n",
        "      source_text = batch['src_text'][0]\n",
        "      target_text = batch['tgt_text'][0]\n",
        "      model_out_text = tokenizer_tgt.decode(model_out.detach().cpu().numpy())\n",
        "\n",
        "      source_texts.append(source_text)\n",
        "      expected.append(target_text)\n",
        "      predicted.append(model_out_text)\n",
        "      print_msg('_'* console_width)\n",
        "      print_msg(f\"{f'SOURCE:':>12}{source_text}\")\n",
        "      print_msg(f\"{f'TARGET:':>12}{target_text}\")\n",
        "\n",
        "      print_msg(f\"{f'PREDICTED:':>12}{model_out_text}\")\n",
        "\n",
        "      if count == num_examples:\n",
        "        print_msg('-'*console_width)\n",
        "        break\n",
        "\n",
        "      if writer:\n",
        "        metric = torchmetrics.CharErrorRate()\n",
        "        cer = metric(predicted, expected)\n",
        "        writer('validation cer', cer)\n",
        "        # writer.flush()\n",
        "\n",
        "        metric = torchmetrics.WordErrorRate()\n",
        "        wer = metric(predicted, expected)\n",
        "        writer('validation wer', wer)\n",
        "        # writer.flush()\n",
        "\n",
        "\n",
        "        metric = torchmetrics.BLEUScore()\n",
        "        bleu = metric(predicted, expected)\n",
        "        writer('validation BLEU', bleu)\n",
        "        # writer.flush()"
      ],
      "metadata": {
        "id": "ycXlwcvgsRAm"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# from config import get_config\n",
        "\n",
        "import warnings\n",
        "# from dataset import BilinualDataset, BilinualDataModule\n",
        "\n",
        "# Ignore all warnings\n",
        "warnings.filterwarnings(\"ignore\")\n",
        "\n",
        "cfg = get_config()\n",
        "\n",
        "cfg['batch_size'] = 6\n",
        "cfg['preload'] = None\n",
        "cfg['num_epochs'] = 1\n",
        "\n",
        "dm = BilinualDataModule(cfg)\n",
        "dm.setup('val')\n",
        "dm.setup('train')\n",
        "dm.setup('test')\n",
        "\n",
        "train_loader, test_loader, val_loader = dm.train_dataloader(), dm.test_dataloader(), dm.val_dataloader()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E5lpXEn6suBu",
        "outputId": "304f7bfd-bcf5-42ac-b0a7-8ea03962128e"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Max length of soruce sentence:: 471\n",
            "Max length of target sentence:: 482\n",
            "Max length of soruce sentence:: 471\n",
            "Max length of target sentence:: 482\n",
            "Max length of soruce sentence:: 471\n",
            "Max length of target sentence:: 482\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tokenizer_src, tokenizer_tgt = dm.get_tokenizers()"
      ],
      "metadata": {
        "id": "4Er8PGgvsxNe"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "os.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\""
      ],
      "metadata": {
        "id": "LNxe8jlys1gG"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Path(cfg['model_folder']).mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "model =  get_model(cfg, tokenizer_src.get_vocab_size(), tokenizer_tgt.get_vocab_size())\n",
        "module = TextTranslator(model, tokenizer_src, tokenizer_tgt, cfg, val_loader, 1000)"
      ],
      "metadata": {
        "id": "I2x8m_K3s3Nq"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from pytorch_lightning import LightningModule, Trainer\n",
        "from pytorch_lightning.loggers import TensorBoardLogger\n",
        "\n",
        "tb_logger = TensorBoardLogger(\"logs\", name=\"S15_dynamic_padding\")\n",
        "trainer = Trainer(\n",
        "  logger=tb_logger,\n",
        "  enable_progress_bar = True,\n",
        "  devices = 1,\n",
        "  accelerator=\"gpu\",\n",
        "  max_epochs=10,\n",
        "\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JF0EfoeTs8xC",
        "outputId": "77860673-85e6-4e55-95e5-024c3530449d"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:pytorch_lightning.utilities.rank_zero:GPU available: True (cuda), used: True\n",
            "INFO:pytorch_lightning.utilities.rank_zero:TPU available: False, using: 0 TPU cores\n",
            "INFO:pytorch_lightning.utilities.rank_zero:IPU available: False, using: 0 IPUs\n",
            "INFO:pytorch_lightning.utilities.rank_zero:HPU available: False, using: 0 HPUs\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "trainer.fit(module, train_dataloaders = train_loader, val_dataloaders = val_loader )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431,
          "referenced_widgets": [
            "5b7343fb36cc42dd87f55c17cad98fe2",
            "a1da1b82c2054252a436eec2fad9d42c",
            "67163c0dd0a7451fbce655035f6f5177",
            "5ed3d1c21e3746a6a82decae440471b9",
            "12eb8478e4a54252b04ce22cd47696f8",
            "dd8a28b205f44e6ca2fb91a668608ec3",
            "bb1fb64d2e664c00b2f971b7fc809def",
            "de87691f65584f7b805f5a7f6bd52116",
            "27fb3cec931248c3aa30c87884056ab6",
            "957f403e00f1481c829d3f8fab3b1603",
            "5f3ee84cf4e9412a9fc1d31ba475386b"
          ]
        },
        "id": "dsqLTW7ts3oO",
        "outputId": "11a89a31-97de-411e-c42a-9d950b35088e"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:pytorch_lightning.accelerators.cuda:LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]\n",
            "INFO:pytorch_lightning.callbacks.model_summary:\n",
            "  | Name    | Type             | Params\n",
            "---------------------------------------------\n",
            "0 | model   | Transformer      | 90.2 M\n",
            "1 | loss_fn | CrossEntropyLoss | 0     \n",
            "---------------------------------------------\n",
            "90.2 M    Trainable params\n",
            "0         Non-trainable params\n",
            "90.2 M    Total params\n",
            "360.724   Total estimated model params size (MB)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Training: 0it [00:00, ?it/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "5b7343fb36cc42dd87f55c17cad98fe2"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loss for epoch 0 is 5.296577274464788\n",
            "Saving Model\n",
            "________________________________________________________________________________\n",
            "     SOURCE:\"Then, Madame Bovary,\" he said at last, \"excuse me, but duty first, you know; I must look after my good-for-nothings.\n",
            "     TARGET:-- Alors, madame Bovary, dit-il enfin, faites excuse, mais le devoir avant tout, vous savez; il faut que j’expédie mes garnements.\n",
            "  PREDICTED:-- Alors , madame , dit - il , il me semble que je suis parti , mais vous savez , je sais bien que mon père est parti .\n",
            "________________________________________________________________________________\n",
            "     SOURCE:At the settlement Philoméne seemed stupid; her eyes were turned into fountains and she was quickly relieved.\n",
            "     TARGET:Au coron, Philomene demeura stupide, les yeux changés en fontaines, tout de suite soulagée.\n",
            "  PREDICTED:A la Maheude , le coron se leva ; elle se leva et se trouvait dans la cheminée .\n",
            "--------------------------------------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "UsgSRR21QxU2"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "mount_file_id": "1iJgDiXTRFaC9llbO3sePU9R57aHgt6Rh",
      "authorship_tag": "ABX9TyN/fr1j5AMT7KzTGmw5Pa1r",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "5b7343fb36cc42dd87f55c17cad98fe2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a1da1b82c2054252a436eec2fad9d42c",
              "IPY_MODEL_67163c0dd0a7451fbce655035f6f5177",
              "IPY_MODEL_5ed3d1c21e3746a6a82decae440471b9"
            ],
            "layout": "IPY_MODEL_12eb8478e4a54252b04ce22cd47696f8"
          }
        },
        "a1da1b82c2054252a436eec2fad9d42c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_dd8a28b205f44e6ca2fb91a668608ec3",
            "placeholder": "​",
            "style": "IPY_MODEL_bb1fb64d2e664c00b2f971b7fc809def",
            "value": "Epoch 1:  10%"
          }
        },
        "67163c0dd0a7451fbce655035f6f5177": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_de87691f65584f7b805f5a7f6bd52116",
            "max": 19063,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_27fb3cec931248c3aa30c87884056ab6",
            "value": 1940
          }
        },
        "5ed3d1c21e3746a6a82decae440471b9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_957f403e00f1481c829d3f8fab3b1603",
            "placeholder": "​",
            "style": "IPY_MODEL_5f3ee84cf4e9412a9fc1d31ba475386b",
            "value": " 1940/19063 [03:20&lt;29:33,  9.65it/s, v_num=3, train_loss=3.940]"
          }
        },
        "12eb8478e4a54252b04ce22cd47696f8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": "inline-flex",
            "flex": null,
            "flex_flow": "row wrap",
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "100%"
          }
        },
        "dd8a28b205f44e6ca2fb91a668608ec3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bb1fb64d2e664c00b2f971b7fc809def": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "de87691f65584f7b805f5a7f6bd52116": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": "2",
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "27fb3cec931248c3aa30c87884056ab6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "957f403e00f1481c829d3f8fab3b1603": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "5f3ee84cf4e9412a9fc1d31ba475386b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}